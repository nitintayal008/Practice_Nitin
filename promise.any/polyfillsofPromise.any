export default function promiseAny(iterable) {
  return new Promise((resolve, reject) => {
    const errors = [];
    let rejectedCount = 0;
    let total = 0;

    for (const item of iterable) {
      total++;
      Promise.resolve(item)
        .then(resolve)
        .catch((err) => {
          errors.push(err);
          rejectedCount++;
          if (rejectedCount === total) {
            reject(new AggregateError(errors, "All promises were rejected"));
          }
        });
    }

    if (total === 0) {
      reject(new AggregateError([], "No promises were provided"));
    }
  });
}

The use of Promise.resolve(item) ensures that each item in the iterable is treated as
 a promise, even if it is not initially one. Here's why it is important and why
  Promise.resolve(item) is used over directly calling item.then:

-> Using Promise.resolve(item) ensures:

Non-promises are safely handled.
Thenables are standardized into proper promises.
The implementation is robust and adheres to the behavior of Promise.any.
